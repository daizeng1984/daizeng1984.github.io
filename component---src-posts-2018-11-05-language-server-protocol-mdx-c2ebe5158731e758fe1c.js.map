{"version":3,"sources":["webpack:///./src/posts/2018-11-05-language-server-protocol.mdx","webpack:///./src/components/posts-layout.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","PostPage","icon"],"mappings":"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","file":"component---src-posts-2018-11-05-language-server-protocol-mdx-c2ebe5158731e758fe1c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/zdai/Workspace/vimwiki/Projects/Blogger/blogv3/src/components/posts-layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Setting up various `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Integrated_development_environment\"\n      }}>{`IDE`}</a>{`-like autocompleter in vim is painful until I met `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/autozimu/LanguageClient-neovim\"\n      }}>{`LanguageClient-neovim`}</a>{`.`}</p>\n    <h1>{`First, Disclaimer`}</h1>\n    <p>{`I've been using Shougo's completion plugin ever since neocomplete (during the ancient vim time). Now in neovim, it has its `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Shougo/deoplete.nvim\"\n      }}>{`dark`}</a>{` form. If you are using other completion plugins like `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ncm2/ncm2\"\n      }}>{`ncm2`}</a>{`, this post might not be the case.`}</p>\n    <h1><a parentName=\"h1\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Language_Server_Protocol\"\n      }}>{`Language Server Protocol`}</a></h1>\n    <p>{`If you ask what changed my impression of Microsoft, I'd answer this Language Server Protocol as one. From the `}<a parentName=\"p\" {...{\n        \"href\": \"https://microsoft.github.io/language-server-protocol/implementors/servers/\"\n      }}>{`official page`}</a>{`, you could see so far many programming languages and `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Domain-specific_language\"\n      }}>{`DSL`}</a>{` are onboard! Even though `}<a parentName=\"p\" {...{\n        \"href\": \"https://code.visualstudio.com/\"\n      }}>{`vscode`}</a>{` still takes first class seat, I'm sure we'll see more powerful standalone servers coming up. Wow, you could even get a server for `}<a parentName=\"p\" {...{\n        \"href\": \"http://nehe.gamedev.net/article/glsl_an_introduction/25007/\"\n      }}>{`GLSL`}</a>{`. No complaints anymore!`}</p>\n    <h1>{`So Goodbye? `}<a parentName=\"h1\" {...{\n        \"href\": \"http://eclim.org/\"\n      }}>{`Eclim`}</a>{`, `}<a parentName=\"h1\" {...{\n        \"href\": \"http://ternjs.net/\"\n      }}>{`Tern.js`}</a>{` and ...`}</h1>\n    <p>{`That means whenever I need to work on a new language in vim, I no longer need to search that particular `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Shougo/deoplete.nvim\"\n      }}>{`deoplete`}</a>{` plugins and make it work after hours due to dependencies and .vimrc configuration. Installing completion engine dependencies is tedious: I still remember `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/carlitux/deoplete-ternjs\"\n      }}>{`tern.js`}</a>{` was not friendly and `}<a parentName=\"p\" {...{\n        \"href\": \"http://eclim.org/vim/code_completion.html\"\n      }}>{`Eclim`}</a>{` bundled with the huge `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.eclipse.org/\"\n      }}>{`Eclipse`}</a>{` GUI family sale is quite tough. They lack of a universal language protocol standard. Even you succeed to make it work, after, you also need to weak key bindings for each of them.`}</p>\n    <p>{`Now with LanguageClient-neovim, I just install the servers (Note: not all of them are out of box but doable and only one time effort) and tell vim where their binaries are. I have freedom to choose any servers I like and freedom to pick up any editors/clients. I've tried out 4 languages so far: Java, Javascript, C++ and Python. They are working amazingly well. Let's see how much work to happiness:`}</p>\n    <h2>{`Java`}</h2>\n    <p>{`From the document, you feel you have to build either `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/eclipse/eclipse.jdt.ls/\"\n      }}>{`eclipse.jdt`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/georgewfraser/vscode-javac\"\n      }}>{`javac based ls`}</a>{`. However, for eclipse.jdt they have prebuilt versions to download `}<a parentName=\"p\" {...{\n        \"href\": \"http://download.eclipse.org/jdtls/milestones/\"\n      }}>{`here`}</a>{`! So download and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`untar`}</code>{`, and then follow the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/autozimu/LanguageClient-neovim/wiki/Java#user-content-installation\"\n      }}>{`script`}</a>{`.`}</p>\n    <h2>{`Python`}</h2>\n    <p>{`Simply run `}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-bash\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`pip `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`install`}</span>{` python-language-server`}</code></pre></div>\n    <p>{`figure out your `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`pyls`}</code>{` binary path and you are done!`}</p>\n    <h2>{`Javascript`}</h2>\n    <p>{`Same as Python, you just need to `}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-bash\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`npm`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`install`}</span>{` javascript-typescript-langserver`}</code></pre></div>\n    <p>{`and find the binaries.`}</p>\n    <h2>{`C++`}</h2>\n    <p>{`If you choose clang (`}{`[which you probably do]`}{`({% post_url 2018-08-11-clang-llvm %})), you just need to install clang with extra tools in box as in this `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/autozimu/LanguageClient-neovim/wiki/Clangd\"\n      }}>{`tutorial`}</a>{`. Although signature has an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/autozimu/LanguageClient-neovim/issues/379\"\n      }}>{`issue`}</a>{`, but I believe community will solve it soon.`}</p>\n    <h1>{`To Sum Up`}</h1>\n    <p>{`After installing these servers, you just need a few lines in your vim plugins settings like `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/daizeng1984/dotfiles/blob/3b4f4473f17575eae54e554e48ba9ef78ccc1a44/neovim/nvim/config/plugins.vimrc#L257\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`Easy piece, right? No?! Okay, if you enjoy a bit more automation, I have a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/daizeng1984/dotfiles/blob/experimental/misc/installNeovimLanguageServers.sh\"\n      }}>{`script`}</a>{` to deploy servers in my dotfile environment, you could adapt and make it yours.`}</p>\n    <h1>{`Other Finding`}</h1>\n    <p>{`At this stage, even not fully convinced but I found `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/neoclide/coc.nvim\"\n      }}>{`coc.nvim`}</a>{` as yet another completion plugin seems to adapt all vscode language-service extensions to vim. If you like more vscode like features and don't have time to install each individual server, you might consider giving it a try. It seems to be still in heavy development. I chose to give it a little bit more time until I get tired of this LanguageClient plugin.`}</p>\n    <p>{`Meanwhile, while we wait, neovim is working on more native lsp support `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/neovim/neovim/pull/6856\"\n      }}>{`here`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from './layout.js'\n\nconst PostPage = (props) => (\n    <Layout {...props} icon='post' />\n)\n\nexport default PostPage\n"],"sourceRoot":""}