(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{"0kTE":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return c}));var a=n("zLVn"),o=(n("q1tI"),n("7ljp")),l=n("8hLB"),s={},i={_frontmatter:s},r=l.a;function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)(r,Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Just cool ..."),Object(o.b)("h1",null,"Non-Root"),Object(o.b)("p",null,"If this bothers you ..."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Namespace ",Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"nix-user-chroot"),". However, it cannot support ",Object(o.b)("a",Object.assign({parentName:"li"},{href:"TODO"}),"tmux reattachment")," (hope this is tmux fault)."),Object(o.b)("li",{parentName:"ol"},"Proot allow tmux to reattach, however, it has limit os support for certain system call which is very hard to find out when it happens. "),Object(o.b)("li",{parentName:"ol"},"Build your own stuff and troubleshooting all on your own.")),Object(o.b)("p",null,"Namespace is recommended however in Mac it seems to be impossible."),Object(o.b)("h1",null,"Direnv"),Object(o.b)("p",null,"Nix ‚ù§ Direnv. These two are so powerful. Direnv grants you seamless environment while Nix guarantees they are reliable and reproducible. My rest blogs are merely snippets to showcase/advertise. Direnv can ",Object(o.b)("a",Object.assign({parentName:"p"},{href:""}),"work with conda")," too!"),Object(o.b)("h1",null,"NodeJS"),Object(o.b)("p",null,"Remember ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"npm install -g"),"? Now it's not allowed and neither good practice. You either install them via ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"withPackage")," style or relies on direnv to respect local ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"node_modules")," folder. "),Object(o.b)("h1",null,"Emscripten"),Object(o.b)("p",null,"Webassembly? Easy piece:"),Object(o.b)("h1",null,"Rust"),Object(o.b)("p",null,"Hottest language I'm planning to learn."),Object(o.b)("div",{className:"gatsby-highlight","data-language":"nix"},Object(o.b)("pre",Object.assign({parentName:"div"},{className:"language-nix"}),Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-nix"})))),Object(o.b)("h1",null,"Python"),Object(o.b)("p",null,"Install pkgs in read-only nix python is impossible. You either use local pip (virtual python env) or manage packages in nix. With nix, you don't need to worry about the native package like cython etc.."),Object(o.b)("p",null,"If you are dealing with pure py pkgs or has no friendly admin"),Object(o.b)("h1",null,"Cpp"),Object(o.b)("p",null,"Nix is the best CPP dev pkg manager in *nix OS I'd say, since C++ pkgs are mostly low level and OS related. For continuous integration I haven't look into Nix power, but for reproducible dev environment setup under linux. Nix provides the best solution."),Object(o.b)("h2",null,"NDK"),Object(o.b)("h1",null,"Jdk"),Object(o.b)("h2",null,"Android"),Object(o.b)("h1",null))}c.isMDXComponent=!0},"8hLB":function(e,t,n){"use strict";var a=n("q1tI"),o=n.n(a),l=(n("Wbzz"),n("Bl7J"));t.a=function(e){return o.a.createElement(l.a,Object.assign({},e,{icon:"post"}))}}}]);
//# sourceMappingURL=component---src-posts-2020-12-10-nix-power-2-mdx-a1fc3a50be0ae17dc11e.js.map