{"version":3,"sources":["webpack:///./src/posts/2022-01-22-fugitive.mdx","webpack:///./src/components/posts-layout.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","PostPage","icon"],"mappings":"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","file":"component---src-posts-2022-01-22-fugitive-mdx-9129b70db2d1da246402.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/zdai/Workspace/vimwiki/Projects/Blogger/blogv3/src/components/posts-layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Most powerful git tool vimmer ever created...`}</p>\n    <h1>{`Why`}</h1>\n    <p>{`This is just a simple tutorial to features I found useful in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tpope/vim-fugitive\"\n      }}>{`Fugitive.vim`}</a>{`.`}</p>\n    <p>{`In my experience, Fugitive is like a surgery tool directly operating on those SHA objects in `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`.git`}</code>{`. There's basically nothing it cannot do and it sounds so illegal. However, it's not foolproof type of product, instead, you need to dive deeper into its documents and tutorial to find your own way. So this blog is just to summarize my way. But I hope it's also useful for you.`}</p>\n    <h1>{`Basic Concept`}</h1>\n    <p>{`First, you need to understand what's `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`fugitive object`}</code>{`. We have 3 types of object: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`tree`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`blob`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`commit`}</code>{`. `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`tree`}</code>{` is folder structure; `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`blob`}</code>{` is file; and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`commit`}</code>{` is the commit object. All of them are coded in SHA to refer to. `}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tpope/vim-fugitive/blob/master/doc/fugitive.txt#L593-L615\"\n      }}>{`Here`}</a>{`'s the example for how Fugitive refers to these objects. But it's much more than you could use in daily life though! What I found useful are:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-text\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`**HEAD~2** HEAD's previous 2 commit object and @ equals HEAD if you like to type short\n**master~2** master current commit's previous 2 commit object\n**branch:filename** e.g. master:% current file blob, or just give branch name master for current file\n**branch:** branch tree object\n**@~2:filename** HEAD's grandparent's file blob`}</code></pre></div>\n    <p>{`In following, I'll just call them object with this context. Together with normal git version syntax, it's easy enough to identify files of different branch and commits. Let's see how powerful it is.`}</p>\n    <h1>{`Fugitive Swiss Knife`}</h1>\n    <h2>{`Git`}</h2>\n    <p>{`Type `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`:G`}</code>{` and you get interactive `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`git status`}</code>{`, where you could staged/unstaged (-), revert (X), and check diff (dv). Do you still remember the painful `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`git add -p`}</code>{` command? When you diff you can directly edit the staged version to partially stage your changes!`}</p>\n    <p>{`This single interface alone is very satisfying already and probably cover 60% of your git usage. `}</p>\n    <h2>{`Git diff(tool)`}</h2>\n    <p>{`You can directly diff two version e.g. `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`G d object1 object2`}</code>{` (diff object now has issue). It returns you the list of diff files. Use `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[q`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`]q`}</code>{` to move between hotspot. To view file line by line diff, you can add this `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tpope/vim-fugitive/issues/132#issuecomment-570844756\"\n      }}>{`temporary fix`}</a>{`. I personally bind it to a `}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`key`}</a>{` so that we could diff lines anytime.`}</p>\n    <h2>{`Git log (Following Files)`}</h2>\n    <p>{`You can trace historical changes through `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`:0Gclog -- %`}</code>{` to get all commits containing current file. Of course `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`%`}</code>{` is just vim's syntax sugar for current file. You can put any file after the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`--`}</code>{`. To diff any 2 versions in the quickfix window, I open a version (in current buffer) and use `}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`key`}</a>{` to select another version to diff against current buffer.`}</p>\n    <h2>{`Git mergetool`}</h2>\n    <p>{`You can directly merge the conflicting file using `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Gvdiffsplit`}</code>{`. Conflicting file will open as three way merge style. 3-way merge windows looks confusing but it's actually straightforward: From left to right is `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Merge Target`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Ours`}</code>{` ➡ `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Working Copy`}</code>{` ➡ `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Feature Branch`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Theirs`}</code>{`.`}</p>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`:diffget`}</code>{` is the same as normal vimdiff mode except that you need to give buffer name. For example, for buffers like:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-text\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`Ours: ......//2/demo.js\nWorking: ....../demo.js\nTheirs: ......//3/demo.js`}</code></pre></div>\n    <p>{`Then you 3-way merge will refer to these buffer with the name `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`2`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`demo`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`3`}</code>{`. For example, to get from `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Ours`}</code>{`, we type `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`:diffget 2`}</code>{`.`}</p>\n    <h2>{`Gedit`}</h2>\n    <p>{`You can get any version in git like God using `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`:Gedit object`}</code>{`. For example, if I want to see the file in a feature branch, I just do `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`:Gedit branchname:/path/to/file`}</code>{`. Or if not sure about the filename, I'll just `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`:Gedit branchname:`}</code>{` to open tree object or folder.`}</p>\n    <p>{`Run `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`:Gedit`}</code>{` without any parameters will take you back to working copy. Combining with `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Gvdiffsplit`}</code>{` you can diff with any version as well manually.`}</p>\n    <h2>{`Gwrite`}</h2>\n    <p>{`Write/save your working one and also update to staged. It's somewhat useful when you do merging and want to use purely from `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Ours`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Theirs`}</code>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from './layout.js'\n\nconst PostPage = (props) => (\n    <Layout {...props} icon='post' />\n)\n\nexport default PostPage\n"],"sourceRoot":""}