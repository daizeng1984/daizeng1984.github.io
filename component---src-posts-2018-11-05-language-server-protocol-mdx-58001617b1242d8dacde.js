(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{"25UU":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return l}));n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("E5k/"),n("q1tI");var a=n("7ljp"),i=n("8hLB");var o={},s={_frontmatter:o},r=i.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(r,Object.assign({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Setting up various ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Integrated_development_environment"}),"IDE"),"-like autocompleter in vim is painful until I met ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/autozimu/LanguageClient-neovim"}),"LanguageClient-neovim"),"."),Object(a.b)("h1",null,"First, Disclaimer"),Object(a.b)("p",null,"I've been using Shougo's completion plugin ever since neocomplete (during the ancient vim time). Now in neovim, it has its ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/Shougo/deoplete.nvim"}),"dark")," form. If you are using other completion plugins like ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/ncm2/ncm2"}),"ncm2"),", this post might not be the case."),Object(a.b)("h1",null,Object(a.b)("a",Object.assign({parentName:"h1"},{href:"https://en.wikipedia.org/wiki/Language_Server_Protocol"}),"Language Server Protocol")),Object(a.b)("p",null,"If you ask what changed my impression of Microsoft, I'd answer this Language Server Protocol as one. From the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://microsoft.github.io/language-server-protocol/implementors/servers/"}),"official page"),", you could see so far many programming languages and ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Domain-specific_language"}),"DSL")," are onboard! Even though ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://code.visualstudio.com/"}),"vscode")," still takes first class seat, I'm sure we'll see more powerful standalone servers coming up. Wow, you could even get a server for ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"http://nehe.gamedev.net/article/glsl_an_introduction/25007/"}),"GLSL"),". No complaints anymore!"),Object(a.b)("h1",null,"So Goodbye? ",Object(a.b)("a",Object.assign({parentName:"h1"},{href:"http://eclim.org/"}),"Eclim"),", ",Object(a.b)("a",Object.assign({parentName:"h1"},{href:"http://ternjs.net/"}),"Tern.js")," and ..."),Object(a.b)("p",null,"That means whenever I need to work on a new language in vim, I no longer need to search that particular ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/Shougo/deoplete.nvim"}),"deoplete")," plugins and make it work after hours due to dependencies and .vimrc configuration. Installing completion engine dependencies is tedious: I still remember ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/carlitux/deoplete-ternjs"}),"tern.js")," was not friendly and ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"http://eclim.org/vim/code_completion.html"}),"Eclim")," bundled with the huge ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://www.eclipse.org/"}),"Eclipse")," GUI family sale is quite tough. They lack of a universal language protocol standard. Even you succeed to make it work, after, you also need to weak key bindings for each of them."),Object(a.b)("p",null,"Now with LanguageClient-neovim, I just install the servers (Note: not all of them are out of box but doable and only one time effort) and tell vim where their binaries are. I have freedom to choose any servers I like and freedom to pick up any editors/clients. I've tried out 4 languages so far: Java, Javascript, C++ and Python. They are working amazingly well. Let's see how much work to happiness:"),Object(a.b)("h2",null,"Java"),Object(a.b)("p",null,"From the document, you feel you have to build either ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/eclipse/eclipse.jdt.ls/"}),"eclipse.jdt")," or ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/georgewfraser/vscode-javac"}),"javac based ls"),". However, for eclipse.jdt they have prebuilt versions to download ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"http://download.eclipse.org/jdtls/milestones/"}),"here"),"! So download and ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"untar"),", and then follow the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/autozimu/LanguageClient-neovim/wiki/Java#user-content-installation"}),"script"),"."),Object(a.b)("h2",null,"Python"),Object(a.b)("p",null,"Simply run ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"pip install python-language-server")," figure out your ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"pyls")," binary path and you are done!"),Object(a.b)("h2",null,"Javascript"),Object(a.b)("p",null,"Same as Python, you just need to ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"npm install javascript-typescript-langserver")," and find the binaries."),Object(a.b)("h2",null,"C++"),Object(a.b)("p",null,"If you choose clang (","[which you probably do]","({% post_url 2018-08-11-clang-llvm %})), you just need to install clang with extra tools in box as in this ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/autozimu/LanguageClient-neovim/wiki/Clangd"}),"tutorial"),". Although signature has an ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/autozimu/LanguageClient-neovim/issues/379"}),"issue"),", but I believe community will solve it soon."),Object(a.b)("h1",null,"To Sum Up"),Object(a.b)("p",null,"After installing these servers, you just need a few lines in your vim plugins settings like ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/daizeng1984/dotfiles/blob/3b4f4473f17575eae54e554e48ba9ef78ccc1a44/neovim/nvim/config/plugins.vimrc#L257"}),"here"),"."),Object(a.b)("p",null,"Easy piece, right? No?! Okay, if you enjoy a bit more automation, I have a ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/daizeng1984/dotfiles/blob/experimental/misc/installNeovimLanguageServers.sh"}),"script")," to deploy servers in my dotfile environment, you could adapt and make it yours."),Object(a.b)("h1",null,"Other Finding"),Object(a.b)("p",null,"At this stage, even not fully convinced but I found ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/neoclide/coc.nvim"}),"coc.nvim")," as yet another completion plugin seems to adapt all vscode language-service extensions to vim. If you like more vscode like features and don't have time to install each individual server, you might consider giving it a try. It seems to be still in heavy development. I chose to give it a little bit more time until I get tired of this LanguageClient plugin."),Object(a.b)("p",null,"Meanwhile, while we wait, neovim is working on more native lsp support ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/neovim/neovim/pull/6856"}),"here"),"."))}l.isMDXComponent=!0},"8hLB":function(e,t,n){"use strict";n("E5k/");var a=n("q1tI"),i=n.n(a),o=(n("Wbzz"),n("Bl7J"));t.a=function(e){return i.a.createElement(o.a,Object.assign({},e,{icon:"post"}))}}}]);
//# sourceMappingURL=component---src-posts-2018-11-05-language-server-protocol-mdx-58001617b1242d8dacde.js.map