(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{"8hLB":function(e,a,t){"use strict";var n=t("q1tI"),s=t.n(n),c=(t("Wbzz"),t("Bl7J"));a.a=function(e){return s.a.createElement(c.a,Object.assign({},e,{icon:"post"}))}},VUzB:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return o})),t.d(a,"default",(function(){return m}));var n=t("zLVn"),s=(t("q1tI"),t("7ljp")),c=t("8hLB"),o={},b={_frontmatter:o},p=c.a;function m(e){var a=e.components,t=Object(n.a)(e,["components"]);return Object(s.b)(p,Object.assign({},b,t,{components:a,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Refresh my C++ 11 brain and upgrade to 17..."),Object(s.b)("h1",null,"Why?"),Object(s.b)("p",null,"After learning Rust, I feel ready to absorb some good parts of modern C++."),Object(s.b)("h1",null,"Book: ",Object(s.b)("a",Object.assign({parentName:"h1"},{href:"https://changkun.de/modern-cpp/"}),"Modern C++"),"(⭐⭐⭐)"),Object(s.b)("p",null,"I found the book can be compressed to a few bullet points for myself:"),Object(s.b)("h2",null,"Cheatsheet"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"use nullptr instead of NULL"),Object(s.b)("li",{parentName:"ul"},"constexpr for e.g. function fibonacci of compile time; also prefer use constexpr instead of const for compile time constants"),Object(s.b)("li",{parentName:"ul"},"if/switch ( tmp variable ; ...) allow variables like for loop"),Object(s.b)("li",{parentName:"ul"},"std::intializer_list<int",">"," -> { 1, 2, 3} for sizable input"),Object(s.b)("li",{parentName:"ul"},"tuple and destructor auto ","[x, y, z]"," = std::make_tuple<int, double, std::string",">","(...); std::get<0",">","(tuple) get 0 element"),Object(s.b)("li",{parentName:"ul"},"destructor assignment works for many other types, pair, POD struct, array, etc."),Object(s.b)("li",{parentName:"ul"},"get auto type: std::is_same<decltype(x), int>::value"),Object(s.b)("li",{parentName:"ul"},"if constexpr( compile time if branch) {..."),Object(s.b)("li",{parentName:"ul"},"use 'using' instead of typedef"),Object(s.b)("li",{parentName:"ul"},"auto can be return value for template and can be parameters for functionals"),Object(s.b)("li",{parentName:"ul"},"default template type template<typename T = int, typename U = int ",">"),Object(s.b)("li",{parentName:"ul"},"skipped some parts due to sick of any unreadable meta programming ... unless you want to implement refection"),Object(s.b)("li",{parentName:"ul"},"use enum class:type instead of enum"),Object(s.b)("li",{parentName:"ul"},"constructor can call other constructor. Yay!"),Object(s.b)("li",{parentName:"ul"},"inherit constructor with 'using Base::Base';"),Object(s.b)("li",{parentName:"ul"},"java flavor override and final: virtual foo() override; or virtual foo() final;"),Object(s.b)("li",{parentName:"ul"},"explicitly constructors: Magic()= default; Magic(const Magic& )=delete; Magic& operator=(const Magic &)=delete;"),Object(s.b)("li",{parentName:"ul"},"lambda: ","[","&","]","(","args",")"," -> returnee {...} [] can be empty or values that want to capture in function when contructing lambda"),Object(s.b)("li",{parentName:"ul"},"use std::function<...",">"," instead of pointer"),Object(s.b)("li",{parentName:"ul"},"bind function: std::bind(foo, std::placeholders::_1, 1,2) new function takes only one arg"),Object(s.b)("li",{parentName:"ul"},"T&& extends the life of rvalue and can change it. while T&& itself as ref is lvalue."),Object(s.b)("li",{parentName:"ul"},"vec.push_back(std::move(str)) here move change the temp rvalue to left value and saved copy contructing"),Object(s.b)("li",{parentName:"ul"},"prefer std::array to T[] and you can get pointer by std::array.data()"),Object(s.b)("li",{parentName:"ul"},"std::forward_list single linked list vs std::list double linked list"),Object(s.b)("li",{parentName:"ul"},"std::shared_ptr get() reset() use_count() std::make_shared<T",">","(0) to create"),Object(s.b)("li",{parentName:"ul"},"std::regex_match(std::string, std::regex) "),Object(s.b)("li",{parentName:"ul"},"std::thread(lambda, args) and then join()"),Object(s.b)("li",{parentName:"ul"},"std::future<T",">"," f = std::async(std::launch::async, []{ return t; }); and f.wait();"),Object(s.b)("li",{parentName:"ul"},"new lock guard std::unique_ptr > std::lock_guard<std::mutex ",">"," lock(a_mutex);"),Object(s.b)("li",{parentName:"ul"},"std::atomic<T",">"," fetch_add() fetch_sub() and is_lock_free to check if support on platform"),Object(s.b)("li",{parentName:"ul"},"std::this_thread::sleep_for(std::chrono::milliseconds(900));"),Object(s.b)("li",{parentName:"ul"},'Raw multiline string R"()";'),Object(s.b)("li",{parentName:"ul"},"alignof and alignas. Wow, my ancient memory of struct alignment.")),Object(s.b)("h1",null,"My Addition"),Object(s.b)("p",null,"The book didn't cover every interesting aspect and filesystem is missing (TODO). So here I did some adding for complete:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"use std::string_view replacing c style string or every c++ const std::string&, and get bonus like start_with(), substr() and better performance etc. view is ",Object(s.b)("strong",{parentName:"li"},"read only")," but don't use in case when immutable is required like e.g. key for hashmap."),Object(s.b)("li",{parentName:"ul"},"initialize class member inside class like integer and for ",Object(s.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"static")," you just need to add ",Object(s.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"inline")),Object(s.b)("li",{parentName:"ul"},"std::optional<T",">"," std::nullopt and error handling"),Object(s.b)("li",{parentName:"ul"},"std::iota(v.begin(), v.end(), start_value) == range_set_container(start_value)"),Object(s.b)("li",{parentName:"ul"},"std::ref and std::cref return std::reference_wrapper for convenience (e.g. shuffle list using vector referencing to the list element)"),Object(s.b)("li",{parentName:"ul"},"std::swap and std::iter_swap"),Object(s.b)("li",{parentName:"ul"},"other good stuff in algorithms e.g. copy, shuffle, sort etc."),Object(s.b)("li",{parentName:"ul"},"std::remove_const to remove const and const_cast"),Object(s.b)("li",{parentName:"ul"},"get type name typeid(variable).name()"),Object(s.b)("li",{parentName:"ul"},"static_assert(sizeof(CLASS)==16) for compile time")),Object(s.b)("h2",null,"My Practice Notes"),Object(s.b)("div",{className:"gatsby-highlight","data-language":"cpp"},Object(s.b)("pre",Object.assign({parentName:"div"},{className:"language-cpp"}),Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Types"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"using")," i32",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"="),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"using")," u32",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"="),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"unsigned")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"using")," u64",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"="),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"unsigned")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"long")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"long")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"using")," i64",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"="),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"long")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"long")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"using")," i8",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"="),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"char"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"using")," u8",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"="),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"unsigned")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"char"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// replace every old array with this..."),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"constexpr")," std",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"::"),"array arr ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token string"}),'"hello"'),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token string"}),'"world"'),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\ncout ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<<")," arr",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"size"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//no more sizeof(T[])/sizeof(T) and basically vector's a few read method"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//same value for every element?"),"\narr",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"fill"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// or std::to_array(), ancient c style can intial to 0 when ={0} though"),"\n\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// always prefer string_view to char[]"),"\nstring_view v ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," str ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/*const char* or string*/"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"while"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"i",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<")," v",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"size"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&&")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"isspace"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"v",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),"i",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"++"),"i",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"while"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"j",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),">"),"i ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&&")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"isspace"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"v",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),"j",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"--"),"j",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\ncout ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<<")," v",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"substr"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"i",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," j",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),"i",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nstring s",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"v",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"data"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," v",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"size"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//copy back to a new string"),"\n\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Lambda instead of functor"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"sort"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"v",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"begin"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," v",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"end"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/*capture list here*/"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"const")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"auto"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&")," x",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"const")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"auto"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&")," y",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"bool")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," x ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<")," y",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// to implement similar algorithm"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"template"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"typename")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"InputIterator"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"typename")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"InputIterator"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"typename")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Compare"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),">"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"sort"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"InputIterator begin",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," InputIterator end",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," Compare cmp",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"for_each"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"map",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"begin"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," map",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"end"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&"),"v",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"const")," std",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"::"),"pair",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<"),"K",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"V",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),">")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&"),"entry",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," v",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"push_back"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"entry",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"transform"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"map",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"begin"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," map",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"end"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," destination",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," lambda",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),"\n\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// GetOrDefault"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"map",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"emplace"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"key",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," value",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"first",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->"),"first ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"or")," second",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// .first is iterator of entry .second is bool"),"\n\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Heavy String manipulate and different type e.g. string_view"),"\nstringstream ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<<")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"char")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"*")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<<")," string_view",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<<")," string",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&"),"\nstringstream ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),">>")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"and")," stoi\n\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Random #"),"\ndefault_random_engine eng",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nuniform_int_distribution",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),">")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"dist"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token number"}),"100"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"dist"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"eng",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," random number in ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token number"}),"100"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),"\n\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// String and values"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"to_chars"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"first",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," last",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," any primitive type",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," \n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"from_chars"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"first",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," last",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," out",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," base",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->"),"from_chars_result ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"*"),"ptr",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," errc",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"::"),"out_of_range ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// check if e == errc() "),"\nto_string ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&")," stoi ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// throws and locale stof stod"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// startwith"),"\nstr",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"compare"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," prefix",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"size"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," prefix",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"==")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Tokenize: getline(sstr, output, '.') is old fashion and char delimiter"),"\nsregex_token_iterator ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"it"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"str",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"begin"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," str",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"end"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"regex"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"R",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token string"}),'"[.]+"'),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// powerful"),"\n\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Compare"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"auto")," myCmp ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"auto"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&")," x",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"auto"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&")," y",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"bool"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," x ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<")," y",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// less as default"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"sort"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"first",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," last",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," myCmp",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\npriority_queue",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<"),"T",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," vector",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<"),"T",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),">"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"decltype"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"myCmp",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),">")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"pq"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"myCmp",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// high priority first(max value) with default less comparator"),"\n\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// compare vector etc."),"\nvector",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),">")," A",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," B",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nA ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<")," B",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//as in lexico order"),"\ntuple",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),">")," C",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," B",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// similar to vector"),"\n\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// String manipulate is painful in c++"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// C++20 string"),"\nstring x ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," std",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"::"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"format"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token string"}),'"{:.2f}"'),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," a",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//float a; goodbye to stringstream"),"\n\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Override hash for your object"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"auto")," my_hash ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"const")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&")," x",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->"),"size_t",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    hash",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),">"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"x",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nunordered_map",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"decltype"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"my_hash",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),">")," hashmap\n\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// gcd lcm"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"gcd"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"x",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," y",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token function"}),"lcm"),Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"x",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," y",Object(s.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")))),Object(s.b)("p",null,"// 2d array\n// change\nint DIR","[4][2]"," = {\n{1, 0},\n{-1,0},\n{0, 1},\n{0,-1}\n};\n// to (note extra brackets)\narray<array<int, 2>, 4> = {{\n{1, 0},\n{-1,0},\n{0, 1},\n{0,-1}\n}};"))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-posts-2021-01-16-c-2-a-mdx-0643ad4a341a3c06ac0d.js.map