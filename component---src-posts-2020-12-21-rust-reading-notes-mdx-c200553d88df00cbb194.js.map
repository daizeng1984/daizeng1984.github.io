{"version":3,"sources":["webpack:///./src/components/posts-layout.js","webpack:///./src/posts/2020-12-21-rust-reading-notes.mdx"],"names":["PostPage","props","icon","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","id","isMDXComponent"],"mappings":"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","file":"component---src-posts-2020-12-21-rust-reading-notes-mdx-c200553d88df00cbb194.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from './layout.js'\n\nconst PostPage = (props) => (\n    <Layout {...props} icon='post' />\n)\n\nexport default PostPage\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/zdai/Workspace/vimwiki/Projects/Blogger/blogv3/src/components/posts-layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Is Rust the next gen C/C++? let's get some readings and keep notes...`}</p>\n    <h1>{`Why? Rust?`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Performance🐾 and Security🐟, I want both!`}</p>\n    </blockquote>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://benchmarksgame-team.pages.debian.net/benchmarksgame/which-programs-are-fastest.html\"\n      }}>{`Perform like C++`}</a>{` yet \"secure\" like a script lang. Talks like a cool script lang yet powerful enough to go deep down to system level. `}</p>\n    <p>{`As a more secure and yet efficient lang, Rust recently catches my eyes and `}<a parentName=\"p\" {...{\n        \"href\": \"https://hub.packtpub.com/rust-as-a-game-programming-language-is-it-any-good/\"\n      }}>{`some people`}</a>{` even believe it can replace (at least somewhat) the long-live C++ for game dev. Although lang itself is not the one to blame for messy/buggy C++ game code (e.g. Cyberpunk 2077), I still wish there is a cleaner/stricter language to branch from C++ (instead of splicing tons of historical/back-compatible features) so that developer doesn't need to create their own code standard, wheels, memory model etc. Junior developers under C++ tends to depise such rules which potentially leading to hard-to-find bugs like dangling pointer, memory tampering, multithread resource sharing with unclear ownership etc.. Rust uses stricter compiling check (historically strict ownership) to make sure a more reliable run time code, which means like a good human language teacher who requires you to elaborate your every sentence (and it might slow you down at first). A lot of system level cli app I used are written by Rust. After my reading, I believe knowing rust can help foster lots of good C++ habits that C++ junior won't have when first diving to C++ project. Learning Rust could be the fastest way to know how to be a better C++ coder. Besides, like other mainstream langs, Rust has friendly pkg manager 👍(cargo and crates.io). It's definitely another level to old C/C++ pkg eco-sys. Enthusiastic people even consider using it to build safer `}<a parentName=\"p\" {...{\n        \"href\": \"https://doc.redox-os.org/book/ch01-02-what-is-redox.html\"\n      }}>{`OS`}</a>{`! In web world, Rust is also modern and mutually first class to webassembly, if you believe wasm is the future web.`}</p>\n    <img {...{\n      \"style\": {\n        \"maxWidth\": \"30rem\"\n      },\n      \"alt\": \"Rust Fast\",\n      \"src\": \"https://benchmarksgame-team.pages.debian.net/benchmarksgame/download/fastest.svg\"\n    }}></img>\n    <p>{`In my pov, Rust does the right balance between safety and efficiency. C++ can do that but requires trained and discipline programmers. The question will be down to whether extra 2% perf gain worth the trade-off. Besides how about pkg manager? Does C++ give you that by default?`}</p>\n    <img {...{\n      \"src\": \"https://media.nature.com/lw800/magazine-assets/d41586-020-03382-2/d41586-020-03382-2_18629102.png\",\n      \"alt\": \"Rust Popular\"\n    }}></img>\n    <h1>{`Cheatsheet for C++ Programmer`}</h1>\n    <p>{`I'm a C++ programmer, so this is for myself to revisit when forget:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`& is stack ptr but with safer read/write + null guarantee (reference_wrapper) and can be unsafely rawed to C++ ptr`}</li>\n      <li parentName=\"ul\">{`borrowing means better referencing (respect ownership). passing value == giveup ownership unless you has trait copy/movable (e.g. primitive type, &T, struct); passing ref only allows multiple immutable or 1 mutable`}</li>\n      <li parentName=\"ul\">{`copy is never deep (== c++ default assignment) unless you explicitly do clone`}</li>\n      <li parentName=\"ul\">{`str == C++ char[] + better boundary (than 0); String == C++ std::string; `}{`[T;usize]`}{` == C++ T[]; Vec<T`}{`>`}{` == C++ std::vector;`}</li>\n      <li parentName=\"ul\">{`&str is the common arguments for String and str, and similar for other pairs like [] & Vec`}</li>\n      <li parentName=\"ul\">{`const == C++ macro or const; static == C++ static`}</li>\n      <li parentName=\"ul\">{`smart pointers is referece with ownership more like C++. see `}<a parentName=\"li\" {...{\n          \"href\": \"#smart_pointers\"\n        }}>{`table from RIA books`}</a></li>\n      <li parentName=\"ul\">{`smart pointers trait DeRef/Drop`}</li>\n      <li parentName=\"ul\">{`homework or before you consider using it as an interview lang: implement simple link list using Rust (ref `}<a parentName=\"li\" {...{\n          \"href\": \"https://rust-unofficial.github.io/too-many-lists/second-option.html\"\n        }}>{`https://rust-unofficial.github.io/too-many-lists/second-option.html`}</a>{`)`}</li>\n    </ul>\n    <h1><a parentName=\"h1\" {...{\n        \"href\": \"https://doc.rust-lang.org/book/title-page.html\"\n      }}>{`The Official Book`}</a>{` (⭐⭐⭐⭐⭐)`}</h1>\n    <p>{`Nice example based learning see `}<a parentName=\"p\" {...{\n        \"href\": \"https://doc.rust-lang.org/rust-by-example/\"\n      }}>{`here`}</a></p>\n    <h2>{`Data Types`}</h2>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"rust\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-rust\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-rust\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`i8`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`i16`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`i32`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`i64`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`i128`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`isize`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`u8`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`u16`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`u32`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`u64`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`u128`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`usize`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`f32`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`f64`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`char`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`unicode `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`4`}</span>{` bytes`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`//b\"...\" is bytes[u8] and only ascii \"...\" is str type`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`bool`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` empty tuple\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`struct`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token type-definition class-name\"\n          }}>{`Tensor`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`i32`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`i32`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`//tuple`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`struct`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token type-definition class-name\"\n          }}>{`Point`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\nx`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`i32`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` y`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`i32`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`enum`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token type-definition class-name\"\n          }}>{`PointType`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`OneDimension`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`// default 0 but can be =1`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`TwoDimension`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Ojb`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`ThreeDimension`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`//enum`}</span>{`\n\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`[`}</span><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`T`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{` length`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`]`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`//array`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`const`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token constant\"\n          }}>{`COMPILE_TIME_VALUE`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`i32`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`10`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`static`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token constant\"\n          }}>{`STATIC_VALUE`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`&`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`str`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token lifetime-annotation symbol\"\n          }}>{`'Unsafe`}</span>{`'`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`// unsafe if you mut it`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`let`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`mut`}</span>{` mutable `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`1`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`//can change but you can let mutable = mutable; to unmut it 😄`}</span></code></pre></div>\n    <ul>\n      <li parentName=\"ul\">{`Immutable variable vs const: const is compile time (c++ const) while immutable is for runtime. You can mut immutable vars.`}</li>\n      <li parentName=\"ul\">{`You can shadow immutable vars but shadowing different type cannot happens`}</li>\n      <li parentName=\"ul\">{`arch type like isize and usize is depending on pc arch used`}</li>\n      <li parentName=\"ul\">{`overflow handling is suggested as wrapping`}<em parentName=\"li\">{`* (mod) , checked`}</em><em parentName=\"li\">{` (-> None if overflow) overflowing_`}</em>{` (->(val, boolean)) and saturating_`}<em parentName=\"li\">{` (clamp at min/max) (`}</em>{` can be add/substract etc.) See rust makes junior aware these issues instead of hiding like c/c++!!!`}</li>\n      <li parentName=\"ul\">{`char is 4byte`}</li>\n      <li parentName=\"ul\">{`tuple let a = (1,2.0,'a') and a.0 is 1 and destructing like let (x, y, z) = a`}</li>\n      <li parentName=\"ul\">{`arrays is familiar c++/c flavor, compile time length on stack let a = `}{`[3; 5]`}{`. Out of index is protected (no invalid memory access) by rust in run time.`}</li>\n    </ul>\n    <h2>{`Functions`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`snake_case convention. `}</li>\n      <li parentName=\"ul\">{`statement doesn't return: let x = let y = 5 or let x = y = 5 is invalid. See rust kill these brain teaser statement👍.`}</li>\n    </ul>\n    <h2>{`Flow`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`if condition must be bool. Because a lot of implicit bool in other lang brings a lot of monsters. as expression let x = if con {1} else {2}; is valid as long as type is the same`}</li>\n      <li parentName=\"ul\">{`loop with break as expression let x = loop { ... break 2 };`}</li>\n      <li parentName=\"ul\">{`for n in nums.iter() or for n in (1..4)`}</li>\n    </ul>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"rust\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-rust\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-rust\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`for`}</span>{` x `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`1`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`..=`}</span>{`n `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`...`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`match`}</span>{` number `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`1`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token macro property\"\n          }}>{`println!`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"One!\"`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`2`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`|`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`3`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`|`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`5`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`|`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`7`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`|`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`11`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token macro property\"\n          }}>{`println!`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"This is a prime\"`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`13`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`..=`}</span><span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`19`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token macro property\"\n          }}>{`println!`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"A teen\"`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n    _ `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token macro property\"\n          }}>{`println!`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"Ain't special\"`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span></code></pre></div>\n    <h2>{`Ownership`}</h2>\n    <p>{`Unique features to enforce memory allocation awareness and foster good habits. Rust want to be as powerful as c/c++ to take advantage of different memory models!`}</p>\n    <ul>\n      <li parentName=\"ul\">{`scope c/c++ similar RAII`}</li>\n      <li parentName=\"ul\">{`str expression e.g. \"hell,world\" -> c style static/global; str -> c style string in stack; String -> c++ std::string in heap`}</li>\n      <li parentName=\"ul\">{`all primitives on stack follow the similar pattern because they have Copy trait. When you do assignment Rust will never automatically create “deep” copies. Rust choose to transfer ownership and invalidate the previous owner unless you impl Copy.`}</li>\n      <li parentName=\"ul\">{`let s = \"hello\" and s is &str with Copy trait so it can copy/assignment but it points to the same stack location. However, fixed len array is not reusing memory, instead it just Copy around like struct.`}</li>\n      <li parentName=\"ul\">{`Tuple has copy if all its field has`}</li>\n      <li parentName=\"ul\">{`mutable references have one big restriction: you can have only one mutable reference to a particular piece of data in a particular scope and we cannot borrow mutable ref if an immutable ref was created and used later; to sum up, as long as there's mutable ref, other immutable ref shouldn't exist!!!`}</li>\n      <li parentName=\"ul\">{`let slice = &s`}{`[0..5]`}{` , &s`}{`[..5]`}{` or &`}{`[2..]`}{` to refer to chunk of bytes`}</li>\n    </ul>\n    <h2>{`Struct & Enum`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`let user2 = User { email, ..user };`}</li>\n      <li parentName=\"ul\">{`reference field will be checked to force you specify lifetime`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`[#derive(Debug)]`}</code>{` macros annotates print gen for `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`{:?}`}</code></li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`[#derive(PartialEq)]`}</code>{`:  == (all field eq) and != gen; Eq is PartialEq with one more check (a == a) so usually is marker behind like `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`[#derive(PartialEq, Eq)]`}</code>{`; HashMap<K, V`}{`>`}{` requires Eq`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`[#derive(PartialOrd)]`}</code>{`: require PartialEq implemented, partial_cmp -> Option<Ordering`}{`>`}{` (None, Less, Equal, Greater)`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`[#derive(Clone, Copy)]`}</code>{`: clone requires all implement clone, copy is fastly shallow copy on stack with (copy requires clone)`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`[#derive(Hash)]`}</code>{`: hash get hash value`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`[#derive(Default)]`}</code>{`: default make default values required by ..._or_default functions`}</li>\n      <li parentName=\"ul\">{`enum Option<T`}{`>`}{` { Some(T), None } and its functions: is_none, as_ref, as_mut, unwrap(_or), map(_or), ok(_or)->Result<T, E`}{`>`}{` ...`}</li>\n    </ul>\n    <h2>{`Mod`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`mod == namespace`}</li>\n      <li parentName=\"ul\">{`pub == public or export`}</li>\n      <li parentName=\"ul\">{`wildcard '*' and 'as'`}</li>\n    </ul>\n    <h2>{`Collections`}</h2>\n    <h3>{`Vec`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`std::vec::Vec`}</li>\n      <li parentName=\"ul\">{`let v:Vec<i32`}{`>`}{` = Vec::new(); or vec`}{`![1, 2, 3]`}{` vs arrays let a:`}{`[u8;5]`}{` = `}{`[1;5]`}{`;`}</li>\n      <li parentName=\"ul\">{`immutable borrow will fail the mutable borrow`}</li>\n      <li parentName=\"ul\">{`fixed len: `}{`[i32;3]`}{` vs slices: &`}{`[usize]`}{` vs vec: Vec<i32`}{`>`}{`, use slice as function parameters is recommended`}</li>\n      <li parentName=\"ul\">{`for x in v.iter() or &v`}</li>\n      <li parentName=\"ul\">{`common methods: len, is`}<em parentName=\"li\">{`empty, push/pop, append/split_off, dedup, clear, reserve/with_capacity, insert/remove, resize, splice, as`}</em>{`((mut_)slice/ptr), iter/&, get/[]`}</li>\n      <li parentName=\"ul\">{`Deref methods for binary search etc. like c++ container common`}</li>\n    </ul>\n    <h3>{`String`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`std::string::String`}</li>\n      <li parentName=\"ul\">{`String vs str and Rust also has the real things: CString vs CStr`}</li>\n      <li parentName=\"ul\">{`String::from(\"...\") vs \"...\".to_string`}</li>\n      <li parentName=\"ul\">{`Since the interexchange of 2 types usually happens, it's recommended to make function arguments as slices: &str`}</li>\n      <li parentName=\"ul\">{`common methods for both String/str: len, push(`}<em parentName=\"li\">{`str)/pop, from(_utf8_lossy), insert(_str)/remove, clear, is_empty, split(_off), as(into)`}</em>{`(bytes/str), replace_range, find`}</li>\n    </ul>\n    <h3>{`HashMap`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`std::collections::HashMap`}</li>\n      <li parentName=\"ul\">{`Key Eq trait is requied`}</li>\n      <li parentName=\"ul\">{`commond methods: insert/remove, get, entry(.or_insert), contains_key`}</li>\n      <li parentName=\"ul\">{`default rust hash is encryptically secure for some attack but slow, to perform better bring your own hasher`}</li>\n    </ul>\n    <h3>{`BTreeMap`}</h3>\n    <h2>{`Error Handling`}</h2>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"rust\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-rust\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-rust\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`enum`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token type-definition class-name\"\n          }}>{`Result`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`<`}</span><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`T`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`E`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Ok`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`T`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Err`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`E`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span></code></pre></div>\n    <ul>\n      <li parentName=\"ul\">{`panic!, Result (unwrap/expect to panic) or ? (return/propagate error Result)`}</li>\n    </ul>\n    <h2>{`Generic & Lifetime`}</h2>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"rust\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-rust\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-rust\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`pub`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`trait`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Summary`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`pub`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`fn`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token function-definition function\"\n          }}>{`summarize`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`&`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`self`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`->`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`String`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`...`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`impl`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Summary`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`for`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Book`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`...`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`impl`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Summary`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`for`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Article`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`...`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span></code></pre></div>\n    <ul>\n      <li parentName=\"ul\">{`equivalent to C++ template`}</li>\n      <li parentName=\"ul\">{`trait == interface`}</li>\n      <li parentName=\"ul\">{`fn notify(& impl Summary) == fn notify<T:Summary`}{`>`}{`(&T)`}</li>\n      <li parentName=\"ul\">{`use + for multiple traits: fn notify(& impl Summary + Display)`}</li>\n      <li parentName=\"ul\">{`use where to clearer signature`}</li>\n      <li parentName=\"ul\">{`impl<T:SomeTrait`}{`>`}{` Summary<T`}{`>`}{` for T to define generic impl (blanked impl)`}</li>\n      <li parentName=\"ul\">{`lifetime will be smaller of your variables associated e.g. `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`'a`}</code></li>\n      <li parentName=\"ul\">{`elision rule: 1. each param has lifetime var 2. if one param return is the same 3. else if one param is &self/&mut self, &self lifetime is assigned else compiler fails to figure out and error!`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`'static`}</code>{` life time is global/static`}</li>\n    </ul>\n    <h2>{`Hands On!`}</h2>\n    <h2></h2>\n    <h1>{`Rust In Action (MEAP) (⭐⭐⭐⭐) `}<a parentName=\"h1\" {...{\n        \"href\": \"https://rust-lang-nursery.github.io/rust-cookbook/intro.html\"\n      }}>{`Rust Cook Book`}</a>{` `}<a parentName=\"h1\" {...{\n        \"href\": \"https://doc.rust-lang.org/nomicon/index.html\"\n      }}>{`Rust Dark Art`}</a></h1>\n    <p>{`Expected to find some lang system level explanation (e.g. virtual function table, garbage collector mechanism) instead of common lang features. Also multi-threading is great topic if it can cover. `}</p>\n    <h2>{`Intros`}</h2>\n    <h3>{`Number Type`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Conversion is explicit through `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`as`}</code></li>\n      <li parentName=\"ul\">{`Each type has its method like `}<em parentName=\"li\">{`24.5_f32`}</em>{`.`}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`round()`}</code>{` is method to round `}<em parentName=\"li\">{`24.5_f32`}</em>{` to `}<em parentName=\"li\">{`25`}</em>{`.`}</li>\n      <li parentName=\"ul\">{`Format type \"{:b}{:o}{:x}\". `}</li>\n      <li parentName=\"ul\">{`Float comparison is tolerate with e.g. `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`f32::EPSILON`}</code>{`.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`num`}</code>{` crate extend primitive types to support e.g. complex, big integer/infinite float, fixed point currency decimal`}</li>\n    </ul>\n    <h3>{`Iteration`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`for x in 0..10 `}</li>\n      <li parentName=\"ul\">{`for x in `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`collection.iter()`}</code>{` or `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`&collection`}</code></li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`iter_mut`}</code>{` is mutable while `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`into_iter`}</code>{` is value typed`}</li>\n    </ul>\n    <h3>{`Flow`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`loop { if ... break }`}</li>\n      <li parentName=\"ul\">{`match `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`0..=40`}</code>{` is range of `}{`[0, 40]`}{`, `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`|`}</code>{` is or and `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`_`}</code>{` is otherwise`}</li>\n    </ul>\n    <h3>{`Function Signature`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`fn lifetime<'a, 'b>(x: &'a i32, y: &' i32) -> i32`}</li>\n      <li parentName=\"ul\">{`fn add<T: std::ops::Add<Output=T> + std::ops::Multiply >`}</li>\n      <li parentName=\"ul\">{`str -> c style stack/static ; String -> std::string heap and I `}<em parentName=\"li\">{`guess`}</em>{` primitive follow the same pattern vs Box.`}</li>\n      <li parentName=\"ul\">{`Arrays -> c style Slice -> new/malloc Vector -> c++ vec`}</li>\n      <li parentName=\"ul\">{`#`}{`![allow(unused_variables)]`}{` #`}{`![allow(dead_code)]`}{` and unimplemnted! macro`}</li>\n    </ul>\n    <h3>{`Struct`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`tuple Example(i32,...) is anonymous struct and reference element by .0 .1 .2 ...`}</li>\n      <li parentName=\"ul\">{`name: String == `}{`[u8; name.size ]`}{` and data: Vec<u8`}{`>`}{` == `}{`[u8; data.size]`}{` and they are most possibly on heap`}</li>\n      <li parentName=\"ul\">{`impl, self and return (default last one, note `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`;`}</code>{`) `}</li>\n    </ul>\n    <h3>{`Implementation`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`unsafe block is used when check global in system level programming, and static globals are all capital`}</li>\n      <li parentName=\"ul\">{`panic! to throw exception`}</li>\n      <li parentName=\"ul\">{`const vs let: const is like c/c++ `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`const`}</code>{` during compile time and define fixed array while `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`let`}</code>{` is runtime. `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`let`}</code>{` is more of shared reference and it can be shadowed and convert to mut.`}</li>\n      <li parentName=\"ul\">{`Result<T, String> -> Ok(T) or Err(String) and `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`unwrap()`}</code></li>\n      <li parentName=\"ul\">{`trait ... fn(self &Self ...) and impl SomeTrait for YourClass. It's like interface and implements/extend`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`#[derive(Debug)]`}</code>{` is for auto trait generation and format as {:?}`}</li>\n      <li parentName=\"ul\">{`pub as export, pub module can be pub(crate) in crate, pub(super) to parent pub(in path) to modules in path`}</li>\n      <li parentName=\"ul\">{`//! for modules/files /// for next code and `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`rustdoc`}</code>{` to render the documents`}</li>\n    </ul>\n    <h2>{`Lifetime, Ownership & Borrowing`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Copy trait is not implement unless primitive type. Assigning value leads ownership transfer. Not convenient but this avoid c/c++ copy/move constructor assumption issue (make things clear).`}</li>\n      <li parentName=\"ul\">{`Drop is extra customized destructor traits that run with default one in case you want to do some extras`}</li>\n      <li parentName=\"ul\">{`Ownership moves through: assignment including function arguments/returns. Tracing these ownership relief garbage collecting burden.`}</li>\n      <li parentName=\"ul\">{`Copy vs Clone: Copy happens at assignment or ownership transfer, all primitive type implements this; Clone is clone trait. You can use compiler to generate bit by bit (shallow) copy/clone #`}{`[derive(Debug,Clone,Copy)]`}{`.`}</li>\n      <li parentName=\"ul\">{`use std::rc::Rc is std::shared_ptr, Rc is immutable, however RefCell<T`}{`>`}{` can wrap it to make struct internal mutable via `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`.borrow_mut()`}</code>{`. Note these 2 are `}<strong parentName=\"li\">{`not`}</strong>{` threadsafe, while Arc<Mutex<T`}{`>`}{`>`}{` is.`}</li>\n      <li parentName=\"ul\">{`raw memory interprets: unsafe { std::mem::transmute(a) };`}</li>\n    </ul>\n    <h1>{`Integer`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`Integer overflow, big/little endian, f32 ieee format and Q7 format (new to me). In these case, try to use function like checked`}<em parentName=\"li\">{`*(add) or overflow`}</em>{`*`}</li>\n      <li parentName=\"ul\">{`bit op: 1u32 << 1`}</li>\n      <li parentName=\"ul\">{`mod similar to namespace, mod.rs is for folder.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`#[cfg(test)]`}</code>{` and cargo test`}</li>\n    </ul>\n    <h1>{`Pointer vs Reference`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`Reference is safe; pointer is unsafe: raw pointer it can be null and no check; smart pointer `}</li>\n      <li parentName=\"ul\">{`Box like java is used to box primitive types. Make them of struct flavor`}</li>\n      <li parentName=\"ul\">{`Raw pointer: let ptr = &obj as `}<em parentName=\"li\">{` const u8 as `}</em>{`mut u8 // &reference cannot be cast directly to mut 🙂`}</li>\n      <li parentName=\"ul\">{`Cow copy on write smart pointer, if read, no copy!`}</li>\n      <li parentName=\"ul\">{`all pointers listed (note not applicable means not directly used) as below:`}</li>\n    </ul>\n    <div id=\"smart_pointers\"></div>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Usage`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`Pros`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`Cons`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Raw Pointer`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`&obj as `}<em parentName=\"td\">{` const u8 as `}</em>{` mut u8`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`speed/acess other system`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`unsafe and not smart🙂`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Box<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Box<T`}{`>`}{`::new(..)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`== c++ unique_ptr`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`size overhead`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Rc<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Rc<T`}{`>`}{`::new(..)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`== c++ shared_ptr`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`size/runtime cost/thread unsafe`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Arc<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`ARc<T`}{`>`}{`::new(..)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`thread safe Rc == c++ atomic_*`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`same as Rc`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Weak<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`rc::Weak::new(..) arc::Weak::new(..)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`==c++ weak_ptr/thread safe`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`size/cost`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Cell<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Cell<T`}{`>`}{`::new(..)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`unmutify obj`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`size/cost`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Ref(Mut)<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Ref(Mut)<T`}{`>`}{`::new(..)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`&(mut)'s runtime version`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`size/cost`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`RefCell<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`RefCell<T`}{`>`}{`::new(..)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`unmut & combine with Rc/Arc`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`size/cost`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Cow<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Cow:from(..)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`avoid clone if read`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`size`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`String`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`String::from(str)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`resizable/encoding check`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`size/cost`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Vec<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Vec<T`}{`>`}{`::new([])`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`resizeable`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`size/cost`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`RawVec<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`RawVec<T, A: Alloc`}{`>`}{`::new([])`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`resizeable/allocator`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`behind Vec & VecDeq, not applicable in code`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Unique<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Unique<T`}{`>`}{`::new(..)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`used by String, Vec etc.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`not applicable in code`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Shared<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Shared<T`}{`>`}{`::new(..)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`used by Rc, Arc etc.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`not applicable in code`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`UnsafeCell<T`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`unsafe`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`not applicable in code`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <ul>\n      <li parentName=\"ul\">{`AsRef<T`}{`>`}{` and AsMut<T`}{`>`}{` to support low cost similar to Borrow, need to pay attention to Borrow Cow ToOwned and AsRef!`}</li>\n      <li parentName=\"ul\">{`Box:new, * unary and drop -> C++ new/delete`}</li>\n      <li parentName=\"ul\">{`Trace heap: timeout 20 ltrace -T -o trace.txt -e -*+malloc+free+realloc ./target/debug/particles`}</li>\n      <li parentName=\"ul\">{`Rust can access low level system api like c/c++, e.g. winapi, kernel32`}</li>\n    </ul>\n    <h2>{`File & Storage`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`serde -> serialize/deserialize -> support json, cbor, bincode, with annotation e.g. #`}{`[derive(Serialize, Deserialize)]`}</li>\n      <li parentName=\"ul\">{`let a = br#\"....\"#; //multiline string format as bytes`}</li>\n      <li parentName=\"ul\">{`unwrap->expect(\"error message\")`}</li>\n      <li parentName=\"ul\">{`OpenOptions::new().read(true).write(true).create(true)... Java flavor builder for options`}</li>\n      <li parentName=\"ul\">{`Path and PathBuf`}</li>\n      <li parentName=\"ul\">{`#`}{`[cfg(target_os=\"linux\")]`}{` -> ifdef `}<strong parentName=\"li\">{`LINUX`}</strong></li>\n      <li parentName=\"ul\">{`? for std Result handling, Ok-> unwrap Err-> return`}</li>\n      <li parentName=\"ul\">{`Riak and Bitcask db (guarantee never lost data)`}</li>\n    </ul>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-text\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`Fixed-width header      Variable-length body\n-----------------    --------------------------\n/                \\\\ /                            \\\\\n+=====+=====+=====+====== - - +============= - - +\n| u32 | u32 | u32 | [u8]      | [u8]             |\n+=====+=====+=====+====== - - +============= - - +\nchksum klen  vlen   key         value`}</code></pre></div>\n    <ul>\n      <li parentName=\"ul\">{`HashMap .insert []==.index() .get()`}</li>\n      <li parentName=\"ul\">{`json!(\"{..json..format}\") from serde_json`}</li>\n    </ul>\n    <h2>{`Networking`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`reqwest::get(url)->Result<(), Box<dyn std::error::Error`}{`>`}{`>`}</li>\n      <li parentName=\"ul\">{`traits/abstract`}</li>\n    </ul>\n    <h3>{`impl to attach fn`}</h3>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"rust\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-rust\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-rust\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`impl`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Abstract`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`fn`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`...`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span></code></pre></div>\n    <h3>{`type conversion`}</h3>\n    <p>{`Require impl the traits if you convert e.g. &str -> String`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"rust\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-rust\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-rust\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`impl`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`From`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`<`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`i32`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`for`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Number`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`//TryFrom is the fallible equivalent`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`fn`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token function-definition function\"\n          }}>{`from`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`s`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`i32`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`->`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`Self`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n        `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Number`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` value`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` s `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span></code></pre></div>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}