{"version":3,"sources":["webpack:///./src/components/posts-layout.js","webpack:///./src/posts/2021-06-04-bgfx-emscripten.mdx"],"names":["PostPage","props","icon","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","style","width","src","isMDXComponent"],"mappings":"8FAAA,iDASeA,IAJE,SAACC,GAAD,OACb,kBAAC,IAAD,iBAAYA,EAAZ,CAAmBC,KAAK,Y,oLCEfC,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,iGACA,4CACA,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAK,+BAAGA,WAAW,KAAQ,CACrC,KAAQ,sCADO,QAAnB,4GAIF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,+BAAGA,WAAW,KAAQ,CACrC,KAAQ,4BADO,cAAnB,uPAIF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,0IAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,qCAGJ,qBAAG,+BAAGA,WAAW,KAAQ,CACrB,KAAQ,mDADT,QAAH,uDAGA,8BACA,sBACE,kBAAIA,WAAW,MAAf,kGAAuH,+BAAGA,WAAW,MAAS,CAC1I,KAAQ,8BAD2G,QAAvH,KAGA,kBAAIA,WAAW,MAAf,0GAA+H,+BAAGA,WAAW,MAAS,CAClJ,KAAQ,4EADmH,SAG/H,kBAAIA,WAAW,MAAf,wGAA6H,kCAAMA,WAAW,MAAS,CACnJ,UAAa,kBAD4G,qBAG7H,kBAAIA,WAAW,MAAf,sGAA2H,+BAAGA,WAAW,MAAS,CAC9I,KAAQ,4EAD+G,SAA3H,uCAGA,kBAAIA,WAAW,MAAf,wEAA6F,+BAAGA,WAAW,MAAS,CAChH,KAAQ,yEADiF,QAA7F,aAE+B,+BAAGA,WAAW,MAAS,CAClD,KAAQ,kFADmB,gBAF/B,mBAKA,kBAAIA,WAAW,MAAf,eAAoC,kCAAMA,WAAW,MAAS,CAC1D,UAAa,kBADmB,yBAApC,iBAEuD,+BAAGA,WAAW,MAAS,CAC1E,KAAQ,+EAD2C,aAFvD,KAKA,kBAAIA,WAAW,MAAf,oDAAyE,kCAAMA,WAAW,MAAS,CAC/F,UAAa,kBADwD,qBAAzE,oCAEsE,kCAAMA,WAAW,MAAS,CAC5F,UAAa,kBADqD,SAFtE,KAKA,kBAAIA,WAAW,MAAf,sCAA2D,kCAAMA,WAAW,MAAS,CACjF,UAAa,kBAD0C,MAA3D,8DAEiF,+BAAGA,WAAW,MAAS,CACpG,KAAQ,2DADqE,QAFjF,uDAMF,kIACA,mBAAKC,MAAO,CACV,SAAY,WACZ,MAAS,OACT,OAAU,IACV,cAAiB,QAEjB,sBAAQC,MAAM,OAAOD,MAAO,CAC1B,SAAY,WACZ,MAAS,OACT,OAAU,OACV,KAAQ,IACR,IAAO,KACNE,IAAI,iEAMbN,EAAWO,gBAAiB","file":"component---src-posts-2021-06-04-bgfx-emscripten-mdx-fc907174352041bb725b.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from './layout.js'\n\nconst PostPage = (props) => (\n    <Layout {...props} icon='post' />\n)\n\nexport default PostPage\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/zengdai/Workspace/vimwiki/Projects/Blogger/blogv3/src/components/posts-layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`bgfx support many platform, let's see if we can embed it on this post...`}</p>\n    <h1>{`Bgfx + Emscripten?`}</h1>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/bkaradzic/bgfx\"\n          }}>{`Bgfx`}</a>{` is a powerful rendering API help you to deal with lots of cross platform/low-level graphics API stuff!`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://emscripten.org/\"\n          }}>{`Emscripten`}</a>{` allows you code in familiar native language like C++ and compile it to WebAssembly (wasm) that runs in browser. There are some limitation of course but good thing about wasm is: your app can be accessed by anyone with modern browser (webgl).`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`WebGL & mobile graphics is the relative low end, if you manage to run on these platform, it also prove that it can run anywhere else.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If you are believer of wasm ...`}</p>\n      </li>\n    </ul>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/daizeng1984/bgfx.emscripten\"\n      }}>{`Here`}</a>{`'s code repo to compile a simple example from bgfx.`}</p>\n    <h1>{`Tips`}</h1>\n    <ol>\n      <li parentName=\"ol\">{`Using nix and direnv saved a lot of rampup works, if you are interested. Check out my previous `}<a parentName=\"li\" {...{\n          \"href\": \"../2020-12-10-nix-power-2\"\n        }}>{`post`}</a>{`.`}</li>\n      <li parentName=\"ol\">{`BGFX can build wasm but failed to compile some examples, you need to compile wasm without example like `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/daizeng1984/bgfx.emscripten/blob/master/Makefile#L76\"\n        }}>{`this`}</a></li>\n      <li parentName=\"ol\">{`Emscripten provides virtual file system but you need to specify the path in configuration and use @: `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`path@virtualpath`}</code></li>\n      <li parentName=\"ol\">{`To use emcc with webgl or glfw you need to treat specially instead of compile yourself. A bunch of `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/daizeng1984/bgfx.emscripten/blob/master/Makefile#L29\"\n        }}>{`flags`}</a>{` I have to add to make things work.`}</li>\n      <li parentName=\"ol\">{`shader and assets build requires tools build. You can write your own `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/daizeng1984/bgfx.make/blob/master/assets/Makefile\"\n        }}>{`make`}</a>{` or reuse `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/daizeng1984/bgfx.emscripten/blob/master/assets/build.ninja\"\n        }}>{`ninja script`}</a>{` from examples.`}</li>\n      <li parentName=\"ol\">{`To generate `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`compile_commands.json`}</code>{`, you can use `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/daizeng1984/bgfx.emscripten/blob/master/default.nix#L10\"\n        }}>{`compiledb`}</a>{`.`}</li>\n      <li parentName=\"ol\">{`To serve the local wasm html files, you can just `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`miniserve -p 9000`}</code>{` which is included in the nix or `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`emrun`}</code>{`.`}</li>\n      <li parentName=\"ol\">{`To debug the wasm, you need to add `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`-g`}</code>{` flag and use google-chrome browser with DWARF plugin (see `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.chrome.com/blog/wasm-debugging-2020/\"\n        }}>{`here`}</a>{`). It's just this feature's still in beta version.`}</li>\n    </ol>\n    <p>{`If you have some patience and modern browser, you should be able to see the 3D bunny in the iframe below:`}</p>\n    <div style={{\n      \"position\": \"relative\",\n      \"width\": \"100%\",\n      \"height\": \"0\",\n      \"paddingBottom\": \"51%\"\n    }}>\n      <iframe width=\"100%\" style={{\n        \"position\": \"absolute\",\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"left\": \"0\",\n        \"top\": \"0\"\n      }} src=\"https://daizeng1984.bitbucket.io/assets/wasm/hdr/main.html\" />\n    </div>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}