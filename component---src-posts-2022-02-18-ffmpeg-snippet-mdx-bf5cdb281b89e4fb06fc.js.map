{"version":3,"sources":["webpack:///./src/components/posts-layout.js","webpack:///./src/posts/2022-02-18-ffmpeg-snippet.mdx"],"names":["PostPage","props","icon","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"8FAAA,iDASeA,IAJE,SAACC,GAAD,OACb,kBAAC,IAAD,iBAAYA,EAAZ,CAAmBC,KAAK,Y,kLCEfC,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,4DACA,oCACA,yRACA,wGACA,oCACA,2CAA0B,kCAAMC,WAAW,KAAQ,CAC/C,UAAa,kBADS,SAA1B,mFAEyG,kCAAMA,WAAW,KAAQ,CAC9H,UAAa,kBADwF,UAFzG,OAI8B,kCAAMA,WAAW,KAAQ,CACnD,UAAa,kBADa,UAJ9B,OAM8B,kCAAMA,WAAW,KAAQ,CACnD,UAAa,kBADa,QAN9B,OAQ4B,kCAAMA,WAAW,KAAQ,CACjD,UAAa,kBADW,QAR5B,oBAUyC,kCAAMA,WAAW,KAAQ,CAC9D,UAAa,kBADwB,UAVzC,6HAYoJ,kCAAMA,WAAW,KAAQ,CACzK,UAAa,kBADmI,SAZpJ,KAc2B,kCAAMA,WAAW,KAAQ,CAChD,UAAa,kBADU,SAd3B,iLAiBA,kCACA,2GACA,wCACA,sBACE,kBAAIA,WAAW,MAAf,qCACA,kBAAIA,WAAW,MAAf,gBACA,kBAAIA,WAAW,MAAf,gBACA,kBAAIA,WAAW,MAAf,kBACA,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,mCACA,kBAAIA,WAAW,MAAf,mBAEF,qCACA,4EAA2D,+BAAGA,WAAW,KAAQ,CAC7E,KAAQ,KAD+C,UAA3D,KAGA,8CACA,8BACA,+BACA,qGAKJH,EAAWI,gBAAiB","file":"component---src-posts-2022-02-18-ffmpeg-snippet-mdx-bf5cdb281b89e4fb06fc.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from './layout.js'\n\nconst PostPage = (props) => (\n    <Layout {...props} icon='post' />\n)\n\nexport default PostPage\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/zdai/Workspace/vimwiki/Projects/Blogger/blogv3/src/components/posts-layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Why would ppl design API like this?`}</p>\n    <h1>{`Motivation`}</h1>\n    <p>{`Like opengl, these low level api is very tedious and old. It's not aiming for usability but rather performance and comprehensive capability. However, I'm still surprised that we don't even have a wrapper API in ffmpeg? Let's use boilerplate snippet to fix.`}</p>\n    <p>{`This is for whoever \"Just Want to Load Video and Get the RGBA! Frame By Frame\".`}</p>\n    <h1>{`FFMPEG 101`}</h1>\n    <p>{`Each video file or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`*.mp4`}</code>{` is composed of video stream, audio stream. For each stream, they are stored as `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`packet`}</code>{` by `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`packet`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`blob`}</code>{` by `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`blog`}</code>{`. However, these `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`packet`}</code>{` are not straightforward to view as a frame of picture. You need to decode it to see the real RGBA images which is called `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`frame`}</code>{`. `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`frame`}</code>{` has different format other than RGBA. Most of cases, you need to convert them, e.g. from YUV (which stores like YYYYYYY....UUUUU.....VVVVVVV....) to RGBA (RGBARGBARGBA...).`}</p>\n    <h1>{`Snippets`}</h1>\n    <p>{`Like opengl's hello world, ffmpeg's hello world is neither mercy for beginner üòÅ. `}</p>\n    <p>{`The process is:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`load file (with meta information)`}</li>\n      <li parentName=\"ol\">{`find decoder`}</li>\n      <li parentName=\"ol\">{`find streams`}</li>\n      <li parentName=\"ol\">{`decode streams`}</li>\n      <li parentName=\"ol\">{`convert frame`}</li>\n      <li parentName=\"ol\">{`do whatever to your RGBA buffer`}</li>\n      <li parentName=\"ol\">{`free resources`}</li>\n    </ol>\n    <h1>{`Try It Out!`}</h1>\n    <p>{`First we need start a cpp project. With Nix this is `}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`simple`}</a>{`.`}</p>\n    <h1>{`Header Only Wrapper?`}</h1>\n    <p>{`TODO:`}</p>\n    <h1>{`Bonus`}</h1>\n    <p>{`What if performance is not my concern? and I just want to hack something...`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}