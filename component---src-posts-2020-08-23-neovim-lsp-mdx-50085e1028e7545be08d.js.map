{"version":3,"sources":["webpack:///./src/components/posts-layout.js","webpack:///./src/posts/2020-08-23-neovim-lsp.mdx"],"names":["PostPage","props","icon","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"8FAAA,iDASeA,IAJE,SAACC,GAAD,OACb,kBAAC,IAAD,iBAAYA,EAAZ,CAAmBC,KAAK,Y,oLCEfC,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,iEACA,oCACA,0CAAyB,+BAAGC,WAAW,KAAQ,CAC3C,KAAQ,2CADa,QAAzB,kFAGA,wEACA,+EAA8D,+BAAGA,WAAW,KAAQ,CAChF,KAAQ,yCADkD,OAA9D,KAGA,yCACA,6DAA4C,+BAAGA,WAAW,KAAQ,CAC9D,KAAQ,2CADgC,cAA5C,wSAGA,+PACA,2HACA,iDACA,+HACA,sBACE,kBAAIA,WAAW,MAAf,mBAAwC,kCAAMA,WAAW,MAAS,CAC9D,UAAa,kBADuB,SAAxC,gDAEsE,+BAAGA,WAAW,MAAS,CACzF,KAAQ,gFAD0D,QAFtE,uCAMF,kBAAS,CACP,UAAa,mBACb,gBAAiB,QAChB,iCAAKA,WAAW,OAAU,CACzB,UAAa,kBACZ,kCAAMA,WAAW,OAAU,CAC1B,UAAa,kBADd,qDAGL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,+EAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,kBAAsC,+BAAGA,WAAW,KAAQ,CACxD,KAAQ,uCAD0B,cAIxC,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,2CAGJ,kBAAS,CACP,UAAa,mBACb,gBAAiB,QAChB,iCAAKA,WAAW,OAAU,CACzB,UAAa,kBACZ,kCAAMA,WAAW,OAAU,CAC1B,UAAa,kBADd,wFAML,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,uDAA4E,kCAAMA,WAAW,MAAS,CAClG,UAAa,kBAD2D,QAA5E,gBAEqC,kCAAMA,WAAW,MAAS,CAC3D,UAAa,kBADoB,0DAFrC,YAImF,kCAAMA,WAAW,MAAS,CACzG,UAAa,kBADkE,YAJnF,gCAMyD,kCAAMA,WAAW,MAAS,CAC/E,UAAa,kBADwC,wBANzD,wCAQ6E,+BAAGA,WAAW,MAAS,CAChG,KAAQ,mEADiE,QAR7E,yDAU2E,kCAAMA,WAAW,MAAS,CACjG,UAAa,kBAD0D,eAV3E,qDAcF,8BACA,gEAA+C,+BAAGA,WAAW,KAAQ,CACjE,KAAQ,gDADmC,kBAA/C,KAGA,sCACA,+EAA8D,+BAAGA,WAAW,KAAQ,CAChF,KAAQ,2CADkD,gBAA9D,MAOJH,EAAWI,gBAAiB","file":"component---src-posts-2020-08-23-neovim-lsp-mdx-50085e1028e7545be08d.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from './layout.js'\n\nconst PostPage = (props) => (\n    <Layout {...props} icon='post' />\n)\n\nexport default PostPage\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/zdai/Workspace/vimwiki/Projects/Blogger/blogv3/src/components/posts-layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Coming late, but it is worth the wait...`}</p>\n    <h1>{`What's LSP`}</h1>\n    <p>{`Please see my old `}<a parentName=\"p\" {...{\n        \"href\": \"../2018-11-05-language-server-protocol\"\n      }}>{`post`}</a>{`. Now LSP client is integrated in neovim to bring fast/smooth user experience!`}</p>\n    <h1>{`What About LanguageClient-Neovim in That Post?`}</h1>\n    <p>{`It's way hard to config and this one is no better than `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/neoclide/coc.nvim\"\n      }}>{`CoC`}</a>{`.`}</p>\n    <h1>{`What About CoC?`}</h1>\n    <p>{`Wow, this one changes a lot since my `}<a parentName=\"p\" {...{\n        \"href\": \"../2018-11-05-language-server-protocol\"\n      }}>{`last check`}</a>{`. Now it's very easy to use and a lot mature. Strongly recommend to people just from Visual Studio. It's a lot heavy as it looks like. It's an ambitious migration of VS extensions plus many powerful features. Major language as JS is a plus. If nvim-lsp fails me, I'll convert to CoC for sure.`}</p>\n    <p>{`The reason to prefer nvim-lsp a bit is native support and performance, though right now, I have no evidence to show that. Another execuse is deoplete plugin doesn't work nicely with CoC and some of my plugins are with deoplete ðŸ˜¢.`}</p>\n    <p>{`Anyway, now I could evaluate both of them in different projects in work and probably update later.`}</p>\n    <h1>{`Nvim-LSP Setup in 3 Min`}</h1>\n    <p>{`If setting up CoC is in 1 min, then lsp takes just a bit longer. To preview nvim's native lsp with me:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Be sure to have `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`conda`}</code>{` at hand (you should!). If not please follow `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/daizeng1984/dotfiles/blob/master/installConda.sh#L16-L17\"\n        }}>{`this`}</a>{`. Just install nvim nightly build:`}</li>\n    </ol>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-text\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`conda install -c daizeng1984/label/nightly nvim`}</code></pre></div>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Comment out your old complete plugins like CoC, LanguageClient-neovim etc.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Install plugin `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/neovim/nvim-lsp\"\n          }}>{`nvim-lsp`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add these lines to your config.vimrc:`}</p>\n      </li>\n    </ol>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-text\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`lua <<EOF\nrequire'nvim_lsp'.pyls.setup{}\nrequire'nvim_lsp'.tsserver.setup{}\nEOF`}</code></pre></div>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`Then install language servers you need, for example `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`pyls`}</code>{` you can do: `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`conda install -y -c conda-forge python-language-server`}</code>{` and for `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`tsserver`}</code>{` you can do in nvim directly `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`:LspInstall tsserver`}</code>{`. For more language support, look at `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/neovim/nvim-lsp#user-content-configurations\"\n        }}>{`here`}</a>{`. Ideally, all these plugins should be installed with `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`:LspInstall`}</code>{` seamlessly in nvim in the future just like CoC.`}</li>\n    </ol>\n    <h1>{`Java`}</h1>\n    <p>{`Java is missing here. But again, just a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/neovim/nvim-lsp/pull/245\"\n      }}>{`matter of time`}</a>{`.`}</p>\n    <h1>{`Autocomplete`}</h1>\n    <p>{`If you need autocomplete, add autocomplete plugin e.g. `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Shougo/deoplete-lsp\"\n      }}>{`deoplete-lsp`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}