{"version":3,"sources":["webpack:///./src/components/file.js","webpack:///./src/pages/project.js"],"names":["ResFile","props","query","render","data","icon","url","filename","file","files","edges","find","n","node","base","includes","publicURL","href","title","desc","faFileArchive","faFilePdf","faFileCode","faLink","faGithubSquare","faFile","projectQuery","Project","allMdx","classes","i","Container","fluid","filter","edge","frontmatter","date","category","resources","map","fm","toString","titleImage","relativePath","forEach","v","obj","propName","undefined","clean","height","fullHeight","Row","className","style","padding","marginTop","marginBottom","Col","md","width","marginLeft","marginRight","overflow","border","borderRadius","fontSize","fontWeight","excerpt","split","d","Object","keys","k","res","pop","margin","color"],"mappings":"0XA0EeA,EAxCC,SAAAC,GAAK,OACjB,kBAAC,cAAD,CACIC,MAAK,aAcTC,OAAQ,SAAAC,GACJ,IA1CSC,EA0CLC,EAAM,GACV,GAAGL,EAAMM,SAAU,CACf,IAAMC,EAAOJ,EAAKK,MAAMC,MAAMC,MAAK,SAAAC,GAC/B,OAAOA,EAAEC,KAAKC,KAAKC,SAASd,EAAMM,aAEnCC,IACHF,EAAME,EAAKK,KAAKG,gBAIhBV,EAAML,EAAMK,IAGhB,OACI,uBAAGW,KAAMX,EAAKY,MAAOjB,EAAMkB,MACvB,kBAAC,IAAD,iBAAqBlB,EAArB,CAA4BI,MAzD3BA,EAyDyCJ,EAAMI,KAxDhD,OAARA,EACOe,IAEM,OAARf,EACEgB,IAEM,QAARhB,EACEiB,IAEM,QAARjB,EACEkB,IAEM,UAARlB,GAGQ,UAARA,EAFEmB,IAMAC,UAMX,U,YC3BSC,EAAY,aA8IVC,UAlFC,SAAC,GAIV,IAFWjB,EAEZ,EAHFN,KACIwB,OAAUlB,MAGRmB,EAAU,CAAC,YAAa,YAAa,aAAc,YACrDC,EAAI,EACR,OACF,kBAAC,IAAD,CAAQzB,KAAK,WACV,0HAEC,kBAAC0B,EAAA,EAAD,CAAWC,OAAK,GAEZtB,EACDuB,QAAO,SAAAC,GACJ,QAASA,EAAKrB,KAAKsB,YAAYC,MAA2C,YAAnCF,EAAKrB,KAAKsB,YAAYE,UAA0BH,EAAKrB,KAAKsB,YAAYG,aAE1GC,KAAI,SAACL,GAEF,IAAMI,EAAYJ,EAAKrB,KAAKsB,YAAYG,UAClCE,EAAKN,EAAKrB,KAAKsB,YACfjB,EAAQsB,EAAGtB,MAAMuB,WACjBlC,EAAYiC,GAAMA,EAAGE,WAAcF,EAAGE,WAAWC,aAAe,KAEtEL,EAAUM,SAAQ,SAACC,IAhCvB,SAACC,GACb,IAAK,IAAIC,KAAYD,EACG,OAAlBA,EAAIC,SAAwCC,IAAlBF,EAAIC,WACzBD,EAAIC,GA8BKE,CAAMJ,MAEV,IAAMK,EAASV,EAAGW,WAAY,KAAO,OACrC,OACI,kBAACC,EAAA,EAAD,CAAKC,UAAWxB,EAAQC,IAAI,GAAKwB,MAAO,CAACC,QAAS,OAAQC,UAAW,OAAQC,aAAc,SAEvF,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIL,MAAO,IACf,yBAAKA,MAAO,CAACM,MAAO,OAAQV,OAAQA,EAAQW,WAAY,OAAQC,YAAa,OAAQN,UAAW,IAAKO,SAAU,WAC3G,kBAAC,IAAD,CAAOxD,SAAUA,MAG7B,kBAACmD,EAAA,EAAD,KACA,kBAACA,EAAA,EAAD,CAAKJ,MAAO,CAAEU,OAAQ,OAAQC,aAAc,MACpC,yBAAKX,MAAO,CAACY,SAAU,UAAWH,SAAU,SAAUN,aAAc,MAC3DvC,GAET,yBAAKoC,MAAO,CAACa,WAAY,IAAKD,SAAU,SAAUH,SAAU,WACvD7B,EAAKrB,KAAKuD,QAAQC,MAAM,MAAM,IAEnC,yBAAKhB,UAAW,SAEZf,EAAUC,KAAI,SAAC+B,GACX,OACI,oCAEQC,OAAOC,KAAKF,GAAG/B,KAAI,SAACkC,GAChB,IAAIlE,EAAW+D,EAAEG,GAAGC,IAAMJ,EAAEG,GAAGC,IAAIL,MAAM,KAAKM,MAAQ,IAChDrE,EAAMgE,EAAEG,GAAGC,IACXvD,EAAOmD,EAAEG,GAAGtD,KAIlB,MAHQ,QAALsD,GAAoB,QAALA,GAAoB,UAALA,IAC7BlE,EAAY,MAGZ,kBAAC,EAAD,CAAS+C,MAAO,CAACsB,OAAQ,UAAYrE,SAAUA,EAAUD,IAAKA,EAAKD,KAAMoE,EAAGtD,KAAMA,YAS9G,2BAAOmC,MAAO,CAACuB,MAAM,SAChBrC,EAAGJ,gB","file":"component---src-pages-project-js-bcfa9892f9b0ab15d309.js","sourcesContent":["import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport { Tooltip } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFileArchive, faFileCode, faLink, faFilePdf, faFile } from '@fortawesome/free-solid-svg-icons'\nimport { faGithubSquare } from '@fortawesome/free-brands-svg-icons'\n\n\n\nconst getIcon = (icon) => {\n    if (icon == 'zip') {\n        return faFileArchive\n    }\n    else if( icon == 'pdf') {\n        return faFilePdf\n    }\n    else if( icon == 'code') {\n        return faFileCode\n    }\n    else if( icon == 'link') {\n        return faLink\n    }\n    else if( icon == 'github') {\n        return faGithubSquare\n    }\n    else if( icon == 'github') {\n        return faGithubSquare\n    }\n    else {\n        return faFile\n    }\n}\n\n\nconst ResFile = props => (\n    <StaticQuery\n        query={graphql`\n          query {\n            files: allFile {\n              edges {\n                node {\n                  relativePath\n                  name\n                  base\n                  publicURL\n                }\n              }\n            }\n          }\n    `}\n    render={data => {\n        let url = \"\"\n        if(props.filename) {\n            const file = data.files.edges.find(n => {\n                return n.node.base.includes(props.filename);\n            });\n            if(file) {\n            url = file.node.publicURL\n            }\n        }\n        else {\n            url = props.url\n        }\n\n        return (\n            <a href={url} title={props.desc} >\n                <FontAwesomeIcon {...props} icon={getIcon(props.icon)} />\n            </a>\n        )\n\n    }}\n/>\n);\n\nexport default ResFile\n\n","import React from \"react\"\nimport { CardDeck, CardColumns, Card, Container, Col, Row } from 'react-bootstrap';\nimport { Link, graphql} from \"gatsby\"\nimport Image from \"../components/image.js\"\nimport ResFile from \"../components/file.js\"\n\nimport Layout from \"../components/layout\"\n\nexport const projectQuery = graphql`\n  query {\n    allMdx(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            titleImage {\n            relativePath\n            }\n            resources {\n                binary {\n                  res\n                  desc\n                }\n                code {\n                  res\n                  desc\n                }\n                github {\n                  res\n                  desc\n                }\n                link {\n                  res\n                  desc\n                }\n                none {\n                  desc\n                }\n                pdf {\n                  res\n                  desc\n                }\n                zip {\n                  res\n                  desc\n                }\n            }\n            title\n            category\n            visible\n            fullHeight\n          }\n          fileAbsolutePath\n        }\n      }\n    }\n  }\n`\nconst clean = (obj)=> {\n  for (let propName in obj) { \n    if (obj[propName] === null || obj[propName] === undefined) {\n      delete obj[propName];\n    }\n  }\n}\n\nconst Project = ({\n    data: {\n        allMdx: { edges },\n    },\n}) => {\n    const classes = ['cloud-sky', 'green-sky', 'yellow-sky', 'pink-sky']\n    let i = 0\n    return (\n  <Layout icon=\"project\">\n    {\"Here's the place I put all my personal projects, research or non-research, big or small, from recent to ancient time...\" }\n      \n      <Container fluid>\n      {\n          edges\n        .filter(edge => {\n            return !!edge.node.frontmatter.date && edge.node.frontmatter.category === \"project\" && edge.node.frontmatter.resources\n        }) // You can filter your posts based on some criteria\n              .map((edge) => {\n                  //TODO\n                  const resources = edge.node.frontmatter.resources\n                  const fm = edge.node.frontmatter\n                  const title = fm.title.toString()\n                  const filename = (fm && fm.titleImage) ? fm.titleImage.relativePath : null\n                  const titleLimit = 25\n                  resources.forEach((v)=>{\n                      clean(v)\n                  })\n                  const height = fm.fullHeight? null : '9rem'\n                  return (\n                      <Row className={classes[i++%4] } style={{padding: '1rem', marginTop: '1rem', marginBottom: '1rem'}}>\n                          \n                          <Col md=\"4\" style={{}}>\n                              <div style={{width: '100%', height: height, marginLeft: 'auto', marginRight: 'auto', marginTop: '0', overflow: 'hidden'}}>\n                                  <Image filename={filename} />\n                              </div>\n                          </Col>\n                      <Col>\n                      <Col style={{ border: 'none', borderRadius: '0'}}>\n                              <div style={{fontSize: 'x-large', overflow: 'hidden', marginBottom: '0'}}>\n                                      {title}\n                              </div>\n                              <div style={{fontWeight: 200, fontSize: 'medium', overflow: 'hidden'}}>\n                                  {edge.node.excerpt.split(\"\\n\")[0]}\n                              </div>\n                              <div className= \"links\" >\n                              {\n                                  resources.map((d)=>{\n                                      return (\n                                          <>\n                                              { \n                                                  Object.keys(d).map((k)=> {\n                                                      let filename = d[k].res ? d[k].res.split(\"/\").pop() : \"#\"\n                                                      const url = d[k].res\n                                                      const desc = d[k].desc\n                                                      if(k == 'none' || k == 'link' || k == 'github') {\n                                                          filename  = null\n                                                      }\n                                                      return (\n                                                          <ResFile style={{margin: '0.5rem' }} filename={filename} url={url} icon={k} desc={desc}/>\n                                                      )\n                                                  })\n                                              }\n                                      </>\n                                      )\n                                  })\n                              }\n                          </div>\n                              <small style={{color:'#bbb'}}>\n                                  {fm.date}\n                              </small>\n                      </Col>\n                  </Col>\n                </Row>\n\n                  )\n              })\n      }\n  </Container>\n  </Layout>\n)\n}\n\nexport default Project\n\n\n"],"sourceRoot":""}