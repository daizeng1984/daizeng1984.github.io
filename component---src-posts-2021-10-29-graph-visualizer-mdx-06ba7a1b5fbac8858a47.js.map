{"version":3,"sources":["webpack:///./src/components/posts-layout.js","webpack:///./src/posts/2021-10-29-graph-visualizer.mdx"],"names":["PostPage","props","icon","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"8FAAA,iDASeA,IAJE,SAACC,GAAD,OACb,kBAAC,IAAD,iBAAYA,EAAZ,CAAmBC,KAAK,Y,8LCGfC,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAI5E,0EACA,gCACA,uCAAsB,+BAAGC,WAAW,KAAQ,CACxC,KAAQ,uFADU,eAAtB,0MAEmO,+BAAGA,WAAW,KAAQ,CACrP,KAAQ,uCADuN,YAFnO,gFAIsG,+BAAGA,WAAW,KAAQ,CACxH,KAAQ,+CAD0F,OAJtG,kEAOA,YAAC,IAAD,CAASD,QAAQ,YACjB,gKACA,8BACA,4FAA2E,kCAAMC,WAAW,KAAQ,CAChG,UAAa,kBAD0D,QAA3E,kFAGA,8BACA,iBAAQ,CACN,UAAa,sBAEb,gCAAIA,WAAW,MAAS,CACtB,UAAa,mBACZ,mCAAOA,WAAW,MAAS,CAC1B,KAAQ,WACR,SAAW,EACX,UAAY,KALhB,qBAOA,gCAAIA,WAAW,MAAS,CACtB,UAAa,mBACZ,mCAAOA,WAAW,MAAS,CAC1B,KAAQ,WACR,SAAW,EACX,UAAY,KALhB,gCAOA,gCAAIA,WAAW,MAAS,CACtB,UAAa,mBACZ,mCAAOA,WAAW,MAAS,CAC1B,KAAQ,WACR,SAAW,EACX,UAAY,KALhB,yBAOA,gCAAIA,WAAW,MAAS,CACtB,UAAa,mBACZ,mCAAOA,WAAW,MAAS,CAC1B,KAAQ,WACR,SAAW,EACX,UAAY,KALhB,sCAQF,iCACA,qGAKJH,EAAWI,gBAAiB","file":"component---src-posts-2021-10-29-graph-visualizer-mdx-06ba7a1b5fbac8858a47.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from './layout.js'\n\nconst PostPage = (props) => (\n    <Layout {...props} icon='post' />\n)\n\nexport default PostPage\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/zengdai/Workspace/vimwiki/Projects/Blogger/blogv3/src/components/posts-layout.js\";\nimport { FlowVis } from '../adhoc/blog/all-wrapped.js';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`found a simple graph visualizer to give a try ...`}</p>\n    <h1>{`Simple`}</h1>\n    <p>{`I used to make `}<a parentName=\"p\" {...{\n        \"href\": \"https://drive.google.com/file/d/12ku-mqtJtsGfC8rbUQUMC2GTXgjWDHhl/view?usp=sharing\"\n      }}>{`fancy graph`}</a>{` for visualization apps. But sometimes I just want something simple, browser accessible and enable me to quickly visualize some json DAG or flow chart. Got this nice workflow visualizer from github (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/d-band/flow-kit\"\n      }}>{`Flow-Kit`}</a>{`) and happy to use it as a tool. Also thanks to excellent react json viewer (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mac-s-g/react-json-view\"\n      }}>{`rjv`}</a>{`). Now we have this graph visualizer takes simple json ðŸŽ‰ðŸŽ‰ðŸŽ‰.`}</p>\n    <FlowVis mdxType=\"FlowVis\" />\n    <p>{`Oh, it actually just requires informal JSON as we usually write in Javascript which means you don't need to use double quotes for keys!`}</p>\n    <h1>{`Next`}</h1>\n    <p>{`Next I want it to be flexible for all json format: I can visciously `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`eval`}</code>{` a Javascript snippet for converting any data or json into the correct format.`}</p>\n    <p>{`TODO:`}</p>\n    <ul {...{\n      \"className\": \"contains-task-list\"\n    }}>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": true,\n          \"disabled\": true\n        }}></input>{` `}{`Fix exception`}</li>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": true,\n          \"disabled\": true\n        }}></input>{` `}{`Fix duplicate edge issue`}</li>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`Add eval to input`}</li>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`Add debounce for input change`}</li>\n    </ul>\n    <h1>{`Further`}</h1>\n    <p>{`Make url take parameters of json format... a crappy jump link visualizer ðŸ˜‚`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}