{"version":3,"sources":["webpack:///./src/components/posts-layout.js","webpack:///./src/posts/2010-03-04-blend-color.mdx"],"names":["PostPage","props","icon","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"8FAAA,iDASeA,IAJE,SAACC,GAAD,OACb,kBAAC,IAAD,iBAAYA,EAAZ,CAAmBC,KAAK,Y,kLCEfC,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,0GACA,iCACA,qGAAoF,+BAAGC,WAAW,KAAQ,CACtG,KAAQ,mDADwE,WAApF,KAGA,qCACA,kFACA,0DACA,kBAAS,CACP,UAAa,mBACb,gBAAiB,QAChB,iCAAKA,WAAW,OAAU,CACzB,UAAa,kBACZ,kCAAMA,WAAW,OAAU,CAC1B,UAAa,kBADd,qJAKL,gZACA,2DACA,kBAAS,CACP,UAAa,mBACb,gBAAiB,QAChB,iCAAKA,WAAW,OAAU,CACzB,UAAa,kBACZ,kCAAMA,WAAW,OAAU,CAC1B,UAAa,kBADd,oHAKL,wJAKJH,EAAWI,gBAAiB","file":"component---src-posts-2010-03-04-blend-color-mdx-910742cd0e9d6ee51457.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from './layout.js'\n\nconst PostPage = (props) => (\n    <Layout {...props} icon='post' />\n)\n\nexport default PostPage\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/zdai/Workspace/vimwiki/Projects/Blogger/blogv3/src/components/posts-layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`This function should be redesigned to be e.g. taking lambda or programmable ðŸ˜†...`}</p>\n    <h1>{`Preword`}</h1>\n    <p>{`To understand blend func or op in graphics API, the best place to go is this `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.andersriggelsen.dk/glblendfunc.php\"\n      }}>{`website`}</a>{`.`}</p>\n    <h1>{`Blend Color`}</h1>\n    <p>{`I think these things should be move into the effect file.`}</p>\n    <p>{`RenderTargetBlend(SetRenderState)`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-text\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`resultcolor = ((Srcblend)*Scrcolor) BlendOp ((Destblend)*Destcolor)\n\nalphacolor = (SrcblendAlpha*Scralpha) AlphaOp (DestblendAlpha*Destalpha)`}</code></pre></div>\n    <p>{`Carefully design your render parameter, you can set a constant blend factor. When D3DRS_SEPARATEALPHABLENDENABLE is set to FALSE (which is the default condition), the render target blending factors and operations applied to alpha are the same as those defined for blending color channels. Be sure to enable D3DRS_ALPHABLEND to tell the pipeline that alpha blending is needed.`}</p>\n    <p>{`TextureBlend(SetTextureStageState)`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-text\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`resultofStage = BlendOp(colorarg1,colorarg2,â€¦..)\n\nresultalphaofStage = AlphaBlendOp(alphaarg1,alphaarg2,â€¦..)`}</code></pre></div>\n    <p>{`Notice that if you donâ€™t care about your vertex color when using texture in Fixed Function, dx will give you a random results.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}